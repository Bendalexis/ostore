MAPS

A map table is automatically derived from
from one or more other tables.
For each source-destination pair, a mapping
function takes the source key and value and
produces the destination key and value. 
There must also always be an inverse function that 
maps the destination key to the source key
(and also to the source table if there are multiple
sources.) 

Maps also support multiple key-value outputs and filters. 
A filter controls which source items will be mapped.

Items in map tables will have the same vector clock 
as the source item from which they are derived.

Initially some simple mapping forms will be supported.
Later, users will be able to specify their own mapping
and filter functions.

PREFIX MAPS (NYI)
Prefix maps can be used for large set joins.

A prefix map can combine data from an item and any of
its prefix items.
For example when mapping an item with key ["a","b"].
The map wil have as input the items with keys
        []
        ["a"]
        ["a","b"]

Changes to a prefix item will cause the maps
of all items it prefixes to be recomputed.

REDUCE (NYI)
Reduce makes use of array keys and their prefix property.
All the elements of the input table that share the same
prefix will be combined by the reducer. The default reducer is 
        Union 
that forms the union of all the elements that share a common
prefix.

Suppose table B is derived from table A by Union reduction.
If A contains

["x",3]  "foo"
["x",4]  "bar"
["y",5]  "zap"

then B will contain

["x"]  [[[3],"foo"],[[4],"bar"]]
["y"]  [[[5],"zap"]]

Note that since keys are ordered, all items to be combined
will be in adjacent table locations enabling efficient reduction.

The Union reducer can be restricted to the first N element
or the last N elements.

Several simple reducers are also provided
        Count
        Sum
        Min 
        Max

Users will also be able to write their own reduce 
functions.
